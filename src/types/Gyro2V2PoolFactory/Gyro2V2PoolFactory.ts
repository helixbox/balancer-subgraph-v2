// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class PoolCreated extends ethereum.Event {
  get params(): PoolCreated__Params {
    return new PoolCreated__Params(this);
  }
}

export class PoolCreated__Params {
  _event: PoolCreated;

  constructor(event: PoolCreated) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Gyro2V2PoolFactory__createInputCapParamsStruct extends ethereum.Tuple {
  get capEnabled(): boolean {
    return this[0].toBoolean();
  }

  get perAddressCap(): BigInt {
    return this[1].toBigInt();
  }

  get globalCap(): BigInt {
    return this[2].toBigInt();
  }
}

export class Gyro2V2PoolFactory__createInputPauseParamsStruct extends ethereum.Tuple {
  get pauseWindowDuration(): BigInt {
    return this[0].toBigInt();
  }

  get bufferPeriodDuration(): BigInt {
    return this[1].toBigInt();
  }
}

export class Gyro2V2PoolFactory__getCreationCodeContractsResult {
  value0: Address;
  value1: Address;

  constructor(value0: Address, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }

  getContractA(): Address {
    return this.value0;
  }

  getContractB(): Address {
    return this.value1;
  }
}

export class Gyro2V2PoolFactory extends ethereum.SmartContract {
  static bind(address: Address): Gyro2V2PoolFactory {
    return new Gyro2V2PoolFactory("Gyro2V2PoolFactory", address);
  }

  create(
    name: string,
    symbol: string,
    tokens: Array<Address>,
    sqrts: Array<BigInt>,
    rateProviders: Array<Address>,
    swapFeePercentage: BigInt,
    owner: Address,
    capManager: Address,
    capParams: Gyro2V2PoolFactory__createInputCapParamsStruct,
    pauseManager: Address,
    pauseParams: Gyro2V2PoolFactory__createInputPauseParamsStruct,
  ): Address {
    let result = super.call(
      "create",
      "create(string,string,address[],uint256[],address[],uint256,address,address,(bool,uint120,uint128),address,(uint256,uint256)):(address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromAddressArray(tokens),
        ethereum.Value.fromUnsignedBigIntArray(sqrts),
        ethereum.Value.fromAddressArray(rateProviders),
        ethereum.Value.fromUnsignedBigInt(swapFeePercentage),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromAddress(capManager),
        ethereum.Value.fromTuple(capParams),
        ethereum.Value.fromAddress(pauseManager),
        ethereum.Value.fromTuple(pauseParams),
      ],
    );

    return result[0].toAddress();
  }

  try_create(
    name: string,
    symbol: string,
    tokens: Array<Address>,
    sqrts: Array<BigInt>,
    rateProviders: Array<Address>,
    swapFeePercentage: BigInt,
    owner: Address,
    capManager: Address,
    capParams: Gyro2V2PoolFactory__createInputCapParamsStruct,
    pauseManager: Address,
    pauseParams: Gyro2V2PoolFactory__createInputPauseParamsStruct,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "create",
      "create(string,string,address[],uint256[],address[],uint256,address,address,(bool,uint120,uint128),address,(uint256,uint256)):(address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromAddressArray(tokens),
        ethereum.Value.fromUnsignedBigIntArray(sqrts),
        ethereum.Value.fromAddressArray(rateProviders),
        ethereum.Value.fromUnsignedBigInt(swapFeePercentage),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromAddress(capManager),
        ethereum.Value.fromTuple(capParams),
        ethereum.Value.fromAddress(pauseManager),
        ethereum.Value.fromTuple(pauseParams),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCreationCode(): Bytes {
    let result = super.call("getCreationCode", "getCreationCode():(bytes)", []);

    return result[0].toBytes();
  }

  try_getCreationCode(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getCreationCode",
      "getCreationCode():(bytes)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getCreationCodeContracts(): Gyro2V2PoolFactory__getCreationCodeContractsResult {
    let result = super.call(
      "getCreationCodeContracts",
      "getCreationCodeContracts():(address,address)",
      [],
    );

    return new Gyro2V2PoolFactory__getCreationCodeContractsResult(
      result[0].toAddress(),
      result[1].toAddress(),
    );
  }

  try_getCreationCodeContracts(): ethereum.CallResult<Gyro2V2PoolFactory__getCreationCodeContractsResult> {
    let result = super.tryCall(
      "getCreationCodeContracts",
      "getCreationCodeContracts():(address,address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Gyro2V2PoolFactory__getCreationCodeContractsResult(
        value[0].toAddress(),
        value[1].toAddress(),
      ),
    );
  }

  getVault(): Address {
    let result = super.call("getVault", "getVault():(address)", []);

    return result[0].toAddress();
  }

  try_getVault(): ethereum.CallResult<Address> {
    let result = super.tryCall("getVault", "getVault():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  gyroConfigAddress(): Address {
    let result = super.call(
      "gyroConfigAddress",
      "gyroConfigAddress():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_gyroConfigAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "gyroConfigAddress",
      "gyroConfigAddress():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isPoolFromFactory(pool: Address): boolean {
    let result = super.call(
      "isPoolFromFactory",
      "isPoolFromFactory(address):(bool)",
      [ethereum.Value.fromAddress(pool)],
    );

    return result[0].toBoolean();
  }

  try_isPoolFromFactory(pool: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isPoolFromFactory",
      "isPoolFromFactory(address):(bool)",
      [ethereum.Value.fromAddress(pool)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _gyroConfigAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateCall extends ethereum.Call {
  get inputs(): CreateCall__Inputs {
    return new CreateCall__Inputs(this);
  }

  get outputs(): CreateCall__Outputs {
    return new CreateCall__Outputs(this);
  }
}

export class CreateCall__Inputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get sqrts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get rateProviders(): Array<Address> {
    return this._call.inputValues[4].value.toAddressArray();
  }

  get swapFeePercentage(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get owner(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get capManager(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get capParams(): CreateCallCapParamsStruct {
    return changetype<CreateCallCapParamsStruct>(
      this._call.inputValues[8].value.toTuple(),
    );
  }

  get pauseManager(): Address {
    return this._call.inputValues[9].value.toAddress();
  }

  get pauseParams(): CreateCallPauseParamsStruct {
    return changetype<CreateCallPauseParamsStruct>(
      this._call.inputValues[10].value.toTuple(),
    );
  }
}

export class CreateCall__Outputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CreateCallCapParamsStruct extends ethereum.Tuple {
  get capEnabled(): boolean {
    return this[0].toBoolean();
  }

  get perAddressCap(): BigInt {
    return this[1].toBigInt();
  }

  get globalCap(): BigInt {
    return this[2].toBigInt();
  }
}

export class CreateCallPauseParamsStruct extends ethereum.Tuple {
  get pauseWindowDuration(): BigInt {
    return this[0].toBigInt();
  }

  get bufferPeriodDuration(): BigInt {
    return this[1].toBigInt();
  }
}
